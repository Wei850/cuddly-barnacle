import numpy as np
import copy as copy


'''黏菌优化算法'''
'''

Args:
    pop: 种群数量
    dim: 个体维度
    lb: 下边界，维度[1,dim]
    ub: 上边界，维度[1,dim]
    MaxIter: 最大迭代次数
    fun: 适应度函数接口

Returns:
    GbestScore: 最优解对应的适应度值
    GbestPositon: 最优解
    Curve: 画迭代曲线用的
    
'''
def SMA(pop, dim, lb, ub, MaxIter, fun):
    # 1.设置参数，初始化种群，并计算适应度值
    # 设置参数
    z = 0.03  # 一个参数，更新个体位置时用，表示随机分布的黏菌个体占总体的比例
    Curve = np.zeros([MaxIter, 1]) # 画迭代图用
    W = np.zeros([pop, dim])  # 黏菌权重
    # 初始化种群
    X = initialization(pop, ub, lb, dim)
    # 计算适应度值
    fitness = CaculateFitness(X, fun)  # 计算适应度值
    fitness, sortIndex = SortFitness(fitness)  # 对适应度值排序
    X = SortPosition(X, sortIndex)  # 种群排序
    GbestScore = copy.copy(fitness[0])
    GbestPositon = copy.copy(X[0, :])
    for t in range(MaxIter):
        worstFitness = fitness[-1]
        bestFitness = fitness[0]
        S = bestFitness - worstFitness + 10E-8  # 当前最优与最差适应度的差值，算权重W用，10E-8为极小值，避免分母为0；
        # 2.更新权重W和参数a、参数b
        # 权重W
        for i in range(pop):
            if i < pop / 2:  # 适应度值排前一半的W计算
                W[i, :] = 1 + np.random.random([1, dim]) * np.log10((bestFitness - fitness[i]) / (S) + 1 + 10E-8)
            else:  # 适应度值排后一半的W计算
                W[i, :] = 1 - np.random.random([1, dim]) * np.log10((bestFitness - fitness[i]) / (S) + 1 + 10E-8)
        # 参数b
        b = 1 - (t / MaxIter)
        # 参数a
        if b != -1 and b != 1:
            a = np.math.atanh(b)
        else:
            a = 1
        # 3.位置更新，分三种情况
        for i in range(pop):
            # 3.1如果r<z，按第一个子公式更新位置
            if np.random.random() < z:
                X[i, :] = (ub.T - lb.T) * np.random.random([1, dim]) + lb.T
            # 否则，更新参数p，vb，vc，继续判断
            else:
                p = np.tanh(abs(fitness[i] - GbestScore))
                vb = 2 * a * np.random.random([1, dim]) - a
                vc = 2 * b * np.random.random([1, dim]) - b
                for j in range(dim):
                    r = np.random.random()
                    A = np.random.randint(pop) # 随机选择两个黏菌个体
                    B = np.random.randint(pop)
                    # 3.2如果r<p，按第二个子公式更新位置
                    if r < p:
                        X[i, j] = GbestPositon[j] + vb[0, j] * (W[i, j] * X[A, j] - X[B, j])
                    # 3.3按第三个子公式更新位置
                    else:
                        X[i, j] = vc[0, j] * X[i, j]

        X = BorderCheck(X, ub, lb, pop, dim)  # 边界检查
        fitness = CaculateFitness(X, fun)  # 计算适应度值
        fitness, sortIndex = SortFitness(fitness)  # 对适应度值排序，得到排好序的适应度值和对应的索引
        X = SortPosition(X, sortIndex)  # 根据排好序的索引对种群排序
        if (fitness[0] <= GbestScore):  # 更新全局最优
            GbestScore = copy.copy(fitness[0])
            GbestPositon = copy.copy(X[0, :])
        Curve[t] = GbestScore

    return GbestScore, GbestPositon, Curve

